// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract CryptoWallet {
    // 合约所有者地址
    address payable public owner;
    
    // 存储每个地址的余额
    mapping(address => uint256) private balances;
    
    // 事件记录
    event Deposit(address indexed sender, uint256 amount);
    event Transfer(address indexed sender, address indexed recipient, uint256 amount);
    event Withdrawal(address indexed owner, uint256 amount);

    // 构造函数：部署合约时设置所有者
    constructor() {
        owner = payable(msg.sender);
    }

    // 修饰器：仅所有者可调用
    modifier onlyOwner() {
        require(msg.sender == owner, "Only owner can call this function");
        _;
    }

    // 接收以太币的fallback函数
    receive() external payable {
        deposit();
    }

    // 存款函数（公开）
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than 0");
        balances[msg.sender] += msg.value;
        emit Deposit(msg.sender, msg.value);
    }

    // 查询余额（公开）
    function getBalance(address account) public view returns (uint256) {
        return balances[account];
    }

    // 转账函数（公开）
    function transfer(address payable recipient, uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        require(recipient != address(0), "Invalid recipient address");
        
        balances[msg.sender] -= amount;
        balances[recipient] += amount;
        
        emit Transfer(msg.sender, recipient, amount);
    }

    // 提现函数（仅所有者）
    function withdraw(uint256 amount) public onlyOwner {
        require(address(this).balance >= amount, "Insufficient contract balance");
        
        (bool success, ) = owner.call{value: amount}("");
        require(success, "Withdrawal failed");
        
        emit Withdrawal(owner, amount);
    }

    // 获取合约总余额（公开）
    function getContractBalance() public view returns (uint256) {
        return address(this).balance;
    }
}
